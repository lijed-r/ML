import pygame
import numpy as np
import random
import sys
import math


W, H = 800 , 600
cell = 40
r = 10
grid = (200, 200, 200)
point = (0, 0, 0)
bg = (255, 255, 255)

pygame.init()

screen = pygame.display.set_mode((W, H), pygame.RESIZABLE)
clock = pygame.time.Clock()

points = []
edges = []
edge = ()
active_point = None

def snap_to_grid(pos):
    x, y = pos
    gx = round(x / cell) * cell
    gy = round(y / cell) * cell
    return gx, gy

def find_nearest_point(click_pos, points, max_dist = 15):
    ex, ey = click_pos
    for px, py in points:
        dist = math.hypot(px - ex, py - ey)
        if dist <= max_dist:
            return px, py
    return None

def point_line_distance(pt, line_start, line_end):
    x, y = pt
    x1, y1 = line_start
    x2, y2 = line_end

    A = x - x1
    B = y - y1
    C = x2 - x1
    D = y2 - y1

    dot = A * C + B * D
    len_sq = C * C + D * D
    param = dot / len_sq if len_sq != 0 else -1

    if param < 0:
        xx, yy = x1, y1
    elif param > 1:
        xx, yy = x2, y2
    else:
        xx = x1 + param * C
        yy = y1 + param * D

    dx = x - xx
    dy = y - yy
    return math.hypot(dx, dy)

def draw_arrow(surface, color, start, end, arrow_size=30, width=3):
    pygame.draw.line(surface, color, start, end, width)

    dx = end[0] - start[0]
    dy = end[1] - start[1]
    angle = math.atan2(dy, dx)

    left_angle = angle + math.pi / 6
    right_angle = angle - math.pi / 6

    x1 = end[0] - arrow_size * math.cos(left_angle)
    y1 = end[1] - arrow_size * math.sin(left_angle)
    x2 = end[0] - arrow_size * math.cos(right_angle)
    y2 = end[1] - arrow_size * math.sin(right_angle)

    pygame.draw.line(surface, color, (x1, y1), end, width)
    pygame.draw.line(surface, color, (x2, y2), end, width)

running = True
while running:
    screen.fill(bg)

    for x in range (0, W, cell):
        pygame.draw.line(screen, grid, (x, 0), (x, H))
    for y in range (0, H, cell):
        pygame.draw.line(screen, grid, (0, y), (W, y))
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            ex, ey = event.pos
            clicked_point = find_nearest_point((ex, ey), points)
            if clicked_point:
                if active_point is None:
                    active_point = clicked_point
                elif clicked_point != active_point:
                    dist = math.hypot(clicked_point[0] - active_point[0], clicked_point[1] - active_point[1])
                    weight = math.ceil(dist / 100)
                    edges.append((active_point, clicked_point, weight, True))
                    active_point = None
                else:
                    active_point = None
            else:
                pos = snap_to_grid((ex, ey))
                if pos not in points:
                    points.append(pos)
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:
            pos = event.pos
            for i, (p1, p2, w, directed) in enumerate(edges):
                dist = point_line_distance(pos, p1, p2)
                if dist < 8:
                    edges[i] = (p1, p2, w, not directed)
                    break
    for p1, p2, weight, directed in edges:
        if directed:
            draw_arrow(screen, (0, 0, 0), p1, p2)
        else:
            draw_arrow(screen, (0, 0, 0), p2, p1)

        mid_x = (p1[0] + p2[0]) // 2
        mid_y = (p1[1] + p2[1]) // 2

        font = pygame.font.SysFont(None, 20)
        text = font.render(str(round(weight)), True, (0, 0, 0))
        screen.blit(text, (mid_x, mid_y))
    
    for x, y in points:
        pygame.draw.circle(screen, point, (x, y), r)
    
    pygame.display.flip()
    clock.tick(60)

           

pygame.quit()
sys.exit()